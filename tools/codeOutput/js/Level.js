/* global HandlebarsComplete, ProgramFile */
/* exported Level */
'use strict';

/**
    Level stores a code |template| and template's |parameters|.
    @class Level
*/
class Level {

    /**
        Initialize the Level.
        @constructor
        @param {String} template The template of the tool.
        @param {Object} parameters Object in which each element contains an array.
        @param {String} explanation The explanation, defaults to an empty string if not defined.
        @param {String} language The language of the code.
        @param {String} input The input for this level.
        @param {String} [outputFilename=''] The name of the output file to test against and generated by the program, if any.
    */
    constructor(template, parameters, explanation, language, input, outputFilename = '') { // eslint-disable-line max-params

        /**
            Templatized program files.
            @property files
            @type {Array} of {ProgramFile}
            @default []
        */
        this.files = [];

        const fileExtensionByLanguage = {
            cpp: 'cpp',
            c: 'c', // eslint-disable-line id-length
            java: 'java',
            python: 'py',
            python3: 'py',
        };

        if (typeof template === 'string') {
            const mainFilename = `main.${fileExtensionByLanguage[language]}`;

            this.files = [ new ProgramFile(HandlebarsComplete.compile(mainFilename), true, HandlebarsComplete.compile(template)) ];
        }
        else {
            this.files = template.map(file =>
                new ProgramFile(HandlebarsComplete.compile(file.filename), file.main, HandlebarsComplete.compile(file.program))
            );

            if (this.files.filter(file => file.main).length === 0) {
                this.files[0].main = true;
            }

            // Move file with "main" function (if exists) to front of list.
            const mainFile = this.files.find(file => file.main);
            const indexOfMain = this.files.indexOf(mainFile);

            this.files.splice(indexOfMain, 1);
            this.files.unshift(mainFile);
        }

        /**
            The set of parameters for this question template.
            @property parameters
            @type {Object}
        */
        this.parameters = parameters || '';

        /**
            The explanation template.
            @property explanation
            @type {String}
            @default ''
        */
        this.explanation = HandlebarsComplete.compile(explanation);

        /**
            The programming language of this question template.
            @property language
            @type {String}
        */
        this.language = language;

        /**
            The input to send to the program.
            @property input
            @type {String}
            @default ''
        */
        this.input = HandlebarsComplete.compile(input);

        /**
            The name of the output file generated by the program, if any.
            @property outputFilename
            @type {String}
            @default ''
        */
        this.outputFilename = HandlebarsComplete.compile(outputFilename);
    }
}
